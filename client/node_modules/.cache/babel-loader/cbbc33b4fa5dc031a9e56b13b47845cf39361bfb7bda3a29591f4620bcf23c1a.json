{"ast":null,"code":"import React,{useEffect,useState}from'react';import'./Sidebar.css';import{response}from'express';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Sidebar=()=>{const[topPosts,setTopPosts]=useState([]);const[categories,setCategories]=useState([]);const[subredditPosts,setSubredditPosts]=useState([]);const[loading,setLoading]=useState(false);// Fetch top posts from Reddit\nuseEffect(()=>{fetch('https://www.reddit.com/r/all/top.json?limit=5').then(response=>response.json()).then(data=>{const posts=data.data.children.map(post=>({title:post.data.title,url:post.data.url,subreddit:post.data.subreddit}));setTopPosts(posts);});},[]);// Static subreddit categories\nuseEffect(()=>{const availableCategories=[{name:'Technology',icon:'fas fa-laptop-code'},{name:'Science',icon:'fas fa-flask'},{name:'Gaming',icon:'fas fa-gamepad'},{name:'News',icon:'fas fa-newspaper'},{name:'Sports',icon:'fas fa-football-ball'}];setCategories(availableCategories);},[]);const handleCategoryClick=subredditName=>{setLoading(true);fetch(`https://www.reddit.com/r/${subredditName}/top.json?limit=5`).then(response=>response.json()).then(data=>{const subredditPosts=data.data.children.map(post=>({title:post.data.title,url:post.data.url}));setSubredditPosts(subredditPosts);setLoading(false);}).catch(error=>{console.error('Error fetching subreddit posts:',error);setLoading(false);});};return/*#__PURE__*/_jsxs(\"aside\",{className:\"sidebar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"nav-links-sidebar\",children:/*#__PURE__*/_jsx(\"nav\",{className:\"sidebar-nav-links\",children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"a\",{href:\"#\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-home\"}),\" Home\"]})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"a\",{href:\"#\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-fire\"}),\" Popular\"]})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"a\",{href:\"#\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-compass\"}),\" Explore\"]})})]})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"top-posts\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Top Posts\"}),/*#__PURE__*/_jsx(\"ul\",{children:topPosts.map((post,index)=>/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"a\",{href:post.url,target:\"_blank\",rel:\"noopener noreferrer\",children:[post.title,\" - \",post.subreddit]})},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"categories\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Subreddit Categories\"}),/*#__PURE__*/_jsx(\"ul\",{children:categories.map(category=>/*#__PURE__*/_jsx(\"li\",{onClick:()=>handleCategoryClick(category.name),children:/*#__PURE__*/_jsxs(\"a\",{href:\"#\",onClick:e=>e.preventDefault(),children:[/*#__PURE__*/_jsx(\"i\",{className:category.icon}),\" \",category.name]})},category.name))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"subreddit-posts\",children:loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading posts...\"}):subredditPosts.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Subreddit Posts\"}),/*#__PURE__*/_jsx(\"ul\",{children:subredditPosts.map((post,index)=>/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:post.url,target:\"_blank\",rel:\"noopener noreferrer\",children:post.title})},index))})]})})]});};export default Sidebar;","map":{"version":3,"names":["React","useEffect","useState","response","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Sidebar","topPosts","setTopPosts","categories","setCategories","subredditPosts","setSubredditPosts","loading","setLoading","fetch","then","json","data","posts","children","map","post","title","url","subreddit","availableCategories","name","icon","handleCategoryClick","subredditName","catch","error","console","className","href","index","target","rel","category","onClick","e","preventDefault","length"],"sources":["/Users/gilgarza/reddit-post-analyzer/client/src/components/Sidebar.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport { response } from 'express';\n\nconst Sidebar = () => {\n  const [topPosts, setTopPosts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [subredditPosts, setSubredditPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch top posts from Reddit\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/all/top.json?limit=5')\n      .then((response) => response.json())\n      .then((data) => {\n        const posts = data.data.children.map((post) => ({\n          title: post.data.title,\n          url: post.data.url,\n          subreddit: post.data.subreddit,\n        }));\n        setTopPosts(posts);\n      });\n  }, []);\n\n  // Static subreddit categories\n  useEffect(() => {\n    const availableCategories = [\n      { name: 'Technology', icon: 'fas fa-laptop-code' },\n      { name: 'Science', icon: 'fas fa-flask' },\n      { name: 'Gaming', icon: 'fas fa-gamepad' },\n      { name: 'News', icon: 'fas fa-newspaper' },\n      { name: 'Sports', icon: 'fas fa-football-ball' },\n    ];\n    setCategories(availableCategories);\n  }, []);\n\n  const handleCategoryClick = (subredditName) => {\n    setLoading(true);\n    fetch(`https://www.reddit.com/r/${subredditName}/top.json?limit=5`)\n      .then((response) => response.json())\n      .then((data) => {\n        const subredditPosts = data.data.children.map((post) => ({\n          title: post.data.title,\n          url: post.data.url,\n        }));\n        setSubredditPosts(subredditPosts);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error fetching subreddit posts:', error);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <aside className=\"sidebar\">\n      {/* Navigation Links Section */}\n      <div className=\"nav-links-sidebar\">\n        <nav className=\"sidebar-nav-links\"> \n          <ul>\n            <li>\n              <a href=\"#\">\n                <i className=\"fas fa-home\"></i> Home\n              </a>\n            </li>\n            <li>\n              <a href=\"#\">\n                <i className=\"fas fa-fire\"></i> Popular\n              </a>\n            </li>\n            <li>\n              <a href=\"#\">\n                <i className=\"fas fa-compass\"></i> Explore\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      {/* Top Posts Section */}\n      <div className=\"top-posts\">\n        <h3>Top Posts</h3>\n        <ul>\n          {topPosts.map((post, index) => (\n            <li key={index}>\n              <a href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {post.title} - {post.subreddit}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Subreddit Categories Section */}\n      <div className=\"categories\">\n        <h3>Subreddit Categories</h3>\n        <ul>\n          {categories.map((category) => (\n            <li key={category.name} onClick={() => handleCategoryClick(category.name)}>\n               <a href=\"#\" onClick={(e) => e.preventDefault()}>\n                <i className={category.icon}></i> {category.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n            {/* Subreddit Posts Section */}\n        <div className=\"subreddit-posts\">\n          {loading ? (\n            <p>Loading posts...</p>\n          ) : (\n            subredditPosts.length > 0 && (\n              <>\n                <h3>Subreddit Posts</h3>\n                <ul>\n                  {subredditPosts.map((post, index) => (\n                    <li key={index}> \n                      <a href={post.url} target='_blank' rel='noopener noreferrer'>\n                        {post.title}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )\n          )}  \n        </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}