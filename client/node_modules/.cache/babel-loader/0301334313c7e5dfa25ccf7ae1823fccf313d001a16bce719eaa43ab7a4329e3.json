{"ast":null,"code":"import React,{useState}from'react';import'./SubredditSearch.css';import{decode}from'he';import PostDetail from'./PostDetail';// Import PostDetail component\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SubredditSearch=()=>{const[query,setQuery]=useState('');const[results,setResults]=useState([]);const[selectedPost,setSelectedPost]=useState(null);// State for selected post\n// Function to handle the search query\nconst handleSearch=async e=>{e.preventDefault();try{const response=await fetch(`https://www.reddit.com/subreddits/search.json?q=${query}`);const data=await response.json();setResults(data.data.children.map(subreddit=>({name:subreddit.data.display_name_prefixed,url:subreddit.data.url,subscribers:subreddit.data.subscribers||'Not available',activeUsers:subreddit.data.active_user_count||'Not available',description:decode(subreddit.data.public_description||'No description available')})));}catch(error){console.error('Error fetching subreddits:',error);}};// Function to fetch post details\nconst fetchPostDetails=async postUrl=>{try{const response=await fetch(`${postUrl}.json`);const postData=await response.json();setSelectedPost(postData[0].data.children[0].data);// Store selected post data\n}catch(error){console.error('Error fetching post details:',error);}};// Handle post click to view details\nconst handlePostClick=url=>{fetchPostDetails(`https://www.reddit.com${url}`);};return/*#__PURE__*/_jsx(\"div\",{className:\"subreddit-search\",children:!selectedPost?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"form\",{className:\"search-form\",onSubmit:handleSearch,children:[/*#__PURE__*/_jsx(\"input\",{className:\"search-input\",type:\"text\",value:query,onChange:e=>setQuery(e.target.value),placeholder:\"Enter subreddit name or topic\"}),/*#__PURE__*/_jsx(\"button\",{className:\"search-button\",type:\"submit\",children:\"Search\"})]}),/*#__PURE__*/_jsx(\"ul\",{className:\"results-list\",children:results.map(subreddit=>/*#__PURE__*/_jsxs(\"li\",{className:\"result-item\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"result-link\",onClick:()=>handlePostClick(subreddit.url)// Fetch post details in app\n,children:\"Details\"}),/*#__PURE__*/_jsx(\"a\",{className:\"result-link\",href:`https://www.reddit.com${subreddit.url}`// Redirect to Reddit\n,target:\"_blank\",rel:\"noopener noreferrer\",children:\"Full Subreddit Post\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Subscribers: \",subreddit.subscribers]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Active Users: \",subreddit.activeUsers||'Not available']}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Description: \",subreddit.description||\"No description available\"]})]},subreddit.name))})]}):/*#__PURE__*/_jsx(PostDetail,{post:selectedPost,setSelectedPost:setSelectedPost})// Render PostDetail component\n});};export default SubredditSearch;","map":{"version":3,"names":["React","useState","decode","PostDetail","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SubredditSearch","query","setQuery","results","setResults","selectedPost","setSelectedPost","handleSearch","e","preventDefault","response","fetch","data","json","children","map","subreddit","name","display_name_prefixed","url","subscribers","activeUsers","active_user_count","description","public_description","error","console","fetchPostDetails","postUrl","postData","handlePostClick","className","onSubmit","type","value","onChange","target","placeholder","onClick","href","rel","post"],"sources":["/Users/gilgarza/reddit-post-analyzer/client/src/components/SubredditSearch.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './SubredditSearch.css';\nimport { decode } from 'he';\nimport PostDetail from './PostDetail';  // Import PostDetail component\n\nconst SubredditSearch = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);  // State for selected post\n\n  // Function to handle the search query\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`https://www.reddit.com/subreddits/search.json?q=${query}`);\n      const data = await response.json();\n      setResults(data.data.children.map(subreddit => ({\n        name: subreddit.data.display_name_prefixed,\n        url: subreddit.data.url,\n        subscribers: subreddit.data.subscribers || 'Not available',\n        activeUsers: subreddit.data.active_user_count || 'Not available',\n        description: decode(subreddit.data.public_description || 'No description available'),\n      })));\n    } catch (error) {\n      console.error('Error fetching subreddits:', error);\n    }\n  };\n\n  // Function to fetch post details\n  const fetchPostDetails = async (postUrl) => {\n    try {\n      const response = await fetch(`${postUrl}.json`);\n      const postData = await response.json();\n      setSelectedPost(postData[0].data.children[0].data);  // Store selected post data\n    } catch (error) {\n      console.error('Error fetching post details:', error);\n    }\n  };\n\n  // Handle post click to view details\n  const handlePostClick = (url) => {\n    fetchPostDetails(`https://www.reddit.com${url}`);\n  };\n\n  return (\n    <div className=\"subreddit-search\">\n      {!selectedPost ? (\n        <>\n          <form className=\"search-form\" onSubmit={handleSearch}>\n            <input\n              className=\"search-input\"\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Enter subreddit name or topic\"\n            />\n            <button className=\"search-button\" type=\"submit\">Search</button>\n          </form>\n\n          <ul className=\"results-list\">\n            {results.map((subreddit) => (\n              <li className=\"result-item\" key={subreddit.name}>\n                {/* Fetch post details within the app */}\n                <button\n                  className=\"result-link\"\n                  onClick={() => handlePostClick(subreddit.url)}  // Fetch post details in app\n                >\n                   Details\n                </button>\n\n                {/* Redirect to Reddit */}\n                <a\n                  className=\"result-link\"\n                  href={`https://www.reddit.com${subreddit.url}`}  // Redirect to Reddit\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                   Full Subreddit Post\n                </a>\n\n                <p>Subscribers: {subreddit.subscribers}</p>\n                <p>Active Users: {subreddit.activeUsers || 'Not available'}</p>\n                <p>Description: {subreddit.description || \"No description available\"}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <PostDetail post={selectedPost} setSelectedPost={setSelectedPost} />  // Render PostDetail component\n      )}\n    </div>\n  );\n};\n\nexport default SubredditSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}