{"ast":null,"code":"var _jsxFileName = \"/Users/gilgarza/reddit-post-analyzer/client/src/components/SubredditSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SubredditSearch.css';\nimport { decode } from 'he';\nimport PostDetail from './PostDetail'; // Import PostDetail component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SubredditSearch = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null); // State for selected post\n\n  // Function to handle the search query\n  const handleSearch = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`https://www.reddit.com/subreddits/search.json?q=${query}`);\n      const data = await response.json();\n      setResults(data.data.children.map(subreddit => ({\n        name: subreddit.data.display_name_prefixed,\n        url: subreddit.data.url,\n        subscribers: subreddit.data.subscribers || 'Not available',\n        activeUsers: subreddit.data.active_user_count || 'Not available',\n        description: decode(subreddit.data.public_description || 'No description available')\n      })));\n    } catch (error) {\n      console.error('Error fetching subreddits:', error);\n    }\n  };\n\n  // Function to fetch post details\n  const fetchPostDetails = async postUrl => {\n    try {\n      const response = await fetch(`${postUrl}.json`);\n      const postData = await response.json();\n      setSelectedPost(postData[0].data.children[0].data); // Store selected post data\n    } catch (error) {\n      console.error('Error fetching post details:', error);\n    }\n  };\n\n  // Handle post click to view details\n  const handlePostClick = url => {\n    fetchPostDetails(`https://www.reddit.com${url}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"subreddit-search\",\n    children: !selectedPost ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"search-form\",\n        onSubmit: handleSearch,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search-input\",\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Enter subreddit name or topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-button\",\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"results-list\",\n        children: results.map(subreddit => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"result-link\",\n            onClick: () => handlePostClick(subreddit.url) // Fetch post details in app\n            ,\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"result-link\",\n            href: `https://www.reddit.com${subreddit.url}` // Redirect to Reddit\n            ,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"Full Subreddit Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Subscribers: \", subreddit.subscribers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Active Users: \", subreddit.activeUsers || 'Not available']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", subreddit.description || \"No description available\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, subreddit.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(PostDetail, {\n      post: selectedPost,\n      setSelectedPost: setSelectedPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) // Render PostDetail component\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(SubredditSearch, \"lWqPg3AH2udrpPNLyrLQt9tWdjw=\");\n_c = SubredditSearch;\nexport default SubredditSearch;\nvar _c;\n$RefreshReg$(_c, \"SubredditSearch\");","map":{"version":3,"names":["React","useState","decode","PostDetail","jsxDEV","_jsxDEV","Fragment","_Fragment","SubredditSearch","_s","query","setQuery","results","setResults","selectedPost","setSelectedPost","handleSearch","e","preventDefault","response","fetch","data","json","children","map","subreddit","name","display_name_prefixed","url","subscribers","activeUsers","active_user_count","description","public_description","error","console","fetchPostDetails","postUrl","postData","handlePostClick","className","onSubmit","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","rel","post","_c","$RefreshReg$"],"sources":["/Users/gilgarza/reddit-post-analyzer/client/src/components/SubredditSearch.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './SubredditSearch.css';\nimport { decode } from 'he';\nimport PostDetail from './PostDetail';  // Import PostDetail component\n\nconst SubredditSearch = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);  // State for selected post\n\n  // Function to handle the search query\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`https://www.reddit.com/subreddits/search.json?q=${query}`);\n      const data = await response.json();\n      setResults(data.data.children.map(subreddit => ({\n        name: subreddit.data.display_name_prefixed,\n        url: subreddit.data.url,\n        subscribers: subreddit.data.subscribers || 'Not available',\n        activeUsers: subreddit.data.active_user_count || 'Not available',\n        description: decode(subreddit.data.public_description || 'No description available'),\n      })));\n    } catch (error) {\n      console.error('Error fetching subreddits:', error);\n    }\n  };\n\n  // Function to fetch post details\n  const fetchPostDetails = async (postUrl) => {\n    try {\n      const response = await fetch(`${postUrl}.json`);\n      const postData = await response.json();\n      setSelectedPost(postData[0].data.children[0].data);  // Store selected post data\n    } catch (error) {\n      console.error('Error fetching post details:', error);\n    }\n  };\n\n  // Handle post click to view details\n  const handlePostClick = (url) => {\n    fetchPostDetails(`https://www.reddit.com${url}`);\n  };\n\n  return (\n    <div className=\"subreddit-search\">\n      {!selectedPost ? (\n        <>\n          <form className=\"search-form\" onSubmit={handleSearch}>\n            <input\n              className=\"search-input\"\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Enter subreddit name or topic\"\n            />\n            <button className=\"search-button\" type=\"submit\">Search</button>\n          </form>\n\n          <ul className=\"results-list\">\n            {results.map((subreddit) => (\n              <li className=\"result-item\" key={subreddit.name}>\n                {/* Fetch post details within the app */}\n                <button\n                  className=\"result-link\"\n                  onClick={() => handlePostClick(subreddit.url)}  // Fetch post details in app\n                >\n                   Details\n                </button>\n\n                {/* Redirect to Reddit */}\n                <a\n                  className=\"result-link\"\n                  href={`https://www.reddit.com${subreddit.url}`}  // Redirect to Reddit\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                   Full Subreddit Post\n                </a>\n\n                <p>Subscribers: {subreddit.subscribers}</p>\n                <p>Active Users: {subreddit.activeUsers || 'Not available'}</p>\n                <p>Description: {subreddit.description || \"No description available\"}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <PostDetail post={selectedPost} setSelectedPost={setSelectedPost} />  // Render PostDetail component\n      )}\n    </div>\n  );\n};\n\nexport default SubredditSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}